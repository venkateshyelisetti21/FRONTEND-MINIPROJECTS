### Number Guessing Game: An Overview

This project is a simple yet engaging number-guessing game built with HTML, CSS, and JavaScript. The objective of the game is to guess a randomly generated number between 1 and 100. This game offers an interactive way for users to test their guessing skills, with immediate feedback provided for each guess. The project also leverages Bootstrap for responsive design, ensuring a user-friendly experience across different devices.

### HTML Structure

The HTML file is the foundation of the gameâ€™s structure. It includes references to Bootstrap's CSS and JS libraries for styling and interactivity. The document is organized into two main sections:

1. **Header Section**:
   - The `head` tag includes links to Bootstrap's CSS, jQuery, Popper.js, and Bootstrap's JavaScript. These libraries are crucial for ensuring that the game is responsive and interactive.

2. **Body Section**:
   - The `body` tag contains the game's user interface elements. The layout is structured using Bootstrap's grid system, ensuring that the game is displayed properly on all screen sizes.
   - The game is wrapped inside a `container-fluid` div with a `bg-container` class, setting the background color to blue and occupying the entire viewport height.
   - Inside this container, the first row presents an image related to the game, accompanied by a brief description encouraging the user to find the right number between 1 and 100.
   - The second row contains the main game interface, where the user interacts with the game. This includes a heading, an input field for the user's guess, a button to submit the guess, and a paragraph element to display the result.

### CSS Styling

The styling is handled within a `<style>` block in the `body` section, with custom classes used to enhance the game's visual appeal:

- **bg-container**: Sets the overall background color of the game to a light blue shade.
- **guess-game-img**: Ensures that the game-related image is responsive, filling the width of its container.
- **game-description**: Styles the game description with the Roboto font, setting the size, weight, and color to match the overall design theme.
- **guess-heading**: Defines the appearance of the game's main heading, including a bold font style and white color for better visibility against the blue background.
- **user-input**: Styles the input field where the user enters their guess, making it larger and more readable.
- **game-result**: Styles the result message that displays after each guess, ensuring it is clearly visible to the user.
- **check-guess**: Customizes the appearance of the button used to submit the user's guess, with rounded corners and padding for a modern look.

### JavaScript Logic

The core functionality of the game is implemented in the `guessing-game.js` script, which is referenced at the bottom of the HTML file. This script is responsible for generating the random number and evaluating the user's guesses.

1. **Variable Declarations**:
   - `gameResult`: Links to the DOM element where the result of the user's guess is displayed.
   - `userInput`: References the input field where the user enters their guess.
   - `randomNum`: Generates a random number between 1 and 100, which the user must guess.

2. **checkGuess() Function**:
   - This function is triggered when the user clicks the "Check" button. It reads the user's input, converts it to an integer, and compares it to the randomly generated number.
   - Based on the comparison, the function provides feedback:
     - If the guess is too high, the message "It's too High, Try again..." is displayed with a blue background.
     - If the guess is too low, the message "It's too Low, Try again..." is displayed with the same blue background.
     - If the guess is correct, a congratulatory message "Congrats! You got it..." is shown, with the background turning green.
     - If the input is invalid (e.g., non-numeric), an error message "Please provide valid Input" appears with a red background.

### Conclusion

This project serves as a practical example of how to combine HTML, CSS, and JavaScript to create an interactive web-based game. By leveraging Bootstrap for styling and responsiveness, it ensures a smooth user experience. The straightforward logic implemented in JavaScript makes it an excellent starting point for beginners looking to understand DOM manipulation and conditional statements in a fun and engaging way. This code can be further enhanced with additional features, such as keeping score or adding difficulty levels, making it a versatile template for more advanced projects.
